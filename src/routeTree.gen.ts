/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as Step4RouteImport } from './routes/step4'
import { Route as Step3RouteImport } from './routes/step3'
import { Route as Step2RouteImport } from './routes/step2'
import { Route as Step1RouteImport } from './routes/step1'
import { Route as IndexRouteImport } from './routes/index'

const Step4Route = Step4RouteImport.update({
  id: '/step4',
  path: '/step4',
  getParentRoute: () => rootRouteImport,
} as any)
const Step3Route = Step3RouteImport.update({
  id: '/step3',
  path: '/step3',
  getParentRoute: () => rootRouteImport,
} as any)
const Step2Route = Step2RouteImport.update({
  id: '/step2',
  path: '/step2',
  getParentRoute: () => rootRouteImport,
} as any)
const Step1Route = Step1RouteImport.update({
  id: '/step1',
  path: '/step1',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/step1': typeof Step1Route
  '/step2': typeof Step2Route
  '/step3': typeof Step3Route
  '/step4': typeof Step4Route
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/step1': typeof Step1Route
  '/step2': typeof Step2Route
  '/step3': typeof Step3Route
  '/step4': typeof Step4Route
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/step1': typeof Step1Route
  '/step2': typeof Step2Route
  '/step3': typeof Step3Route
  '/step4': typeof Step4Route
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/step1' | '/step2' | '/step3' | '/step4'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/step1' | '/step2' | '/step3' | '/step4'
  id: '__root__' | '/' | '/step1' | '/step2' | '/step3' | '/step4'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Step1Route: typeof Step1Route
  Step2Route: typeof Step2Route
  Step3Route: typeof Step3Route
  Step4Route: typeof Step4Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/step4': {
      id: '/step4'
      path: '/step4'
      fullPath: '/step4'
      preLoaderRoute: typeof Step4RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/step3': {
      id: '/step3'
      path: '/step3'
      fullPath: '/step3'
      preLoaderRoute: typeof Step3RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/step2': {
      id: '/step2'
      path: '/step2'
      fullPath: '/step2'
      preLoaderRoute: typeof Step2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/step1': {
      id: '/step1'
      path: '/step1'
      fullPath: '/step1'
      preLoaderRoute: typeof Step1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Step1Route: Step1Route,
  Step2Route: Step2Route,
  Step3Route: Step3Route,
  Step4Route: Step4Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
